openapi: '3.0.0'

info:
  description: You don't need a maths degree for counting calories. Built in HacKCU V.
  version: '1.0'
  title: Food Lord API

servers:
  - url: http://localhost:8081
    description: Localhost endpoint.

tags:
  - name: calories
    description: endpoint for counting calories.
  - name: user
    description: endpoint for managing users.
  - name: dashboard
    description: endpoint for managing the user dashboard.

paths:
  /calories:
    post:
      tags:
        - calories
      summary: Getting ingredients and calories given an image
      description: Invoke this endpoint to get ingredients and calories given an image.
      operationId: src.api.calories.post
      requestBody:
        required: true
        description: Body wrapper for the request.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IngredientsBody"
      responses:
        200:
          description: Standard Food Lord API JSON response. You should check the `error` attribute to determine if there was an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        default:
          description: Unexpected error.
          content:
            application/text:
              schema:
                type: string
                description: Error description.

  /calories/ingredients:
    post:
      tags:
        - calories
      summary: Getting ingredients given an image
      description: Invoke this endpoint to get ingredients given an image.
      operationId: src.api.calories.ingredients_post
      requestBody:
        required: true
        description: Body wrapper for the request.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IngredientsBody"
      responses:
        200:
          description: Standard Food Lord API JSON response. You should check the `error` attribute to determine if there was an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        default:
          description: Unexpected error.
          content:
            application/text:
              schema:
                type: string
                description: Error description.

  /calories/count:
    post:
      tags:
        - calories
      summary: Counting calories given a list of ingredients
      description: Invoke this endpoint to count calories given a list of ingredients.
      operationId: src.api.calories.count_post
      requestBody:
        required: true
        description: Body wrapper for the request.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CountBody"
      responses:
        200:
          description: Standard Food Lord API JSON response. You should check the `error` attribute to determine if there was an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        default:
          description: Unexpected error.
          content:
            application/text:
              schema:
                type: string
                description: Error description.

  /calories/confirm:
    post:
      tags:
        - calories
      summary: Confirming calories for a user given a list of ingredients and its id
      description: Invoke this endpoint to confirm or commit for a user a list of ingredients and calories.
      operationId: src.api.calories.confirm_post
      requestBody:
        required: true
        description: Body wrapper for the request.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmBody"
      responses:
        200:
          description: Standard Food Lord API JSON response. You should check the `error` attribute to determine if there was an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        default:
          description: Unexpected error.
          content:
            application/text:
              schema:
                type: string
                description: Error description.

  /user:
    get:
      tags:
        - user
      summary: Getting user information given its id
      description: Invoke this endpoint to get the user information given its id.
      operationId: src.api.user.get
      parameters:
        - name: user_id
          in: query
          description: Specifies the user to get.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Standard Food Lord API JSON response. You should check the `error` attribute to determine if there was an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        default:
          description: Unexpected error.
          content:
            application/text:
              schema:
                type: string
                description: Error description.
    post:
      tags:
        - user
      summary: Creating a user given its information
      description: Invoke this endpoint to create a user given its information.
      operationId: src.api.user.post
      requestBody:
        required: true
        description: Body wrapper for the request.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserBody"
      responses:
        200:
          description: Standard Food Lord API JSON response. You should check the `error` attribute to determine if there was an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        default:
          description: Unexpected error.
          content:
            application/text:
              schema:
                type: string
                description: Error description.

  /user/login:
    post:
      tags:
        - user
      summary: Logging in a user given a username and a password
      description: Invoke this endpoint to log in a user given its information.
      operationId: src.api.user.login_post
      requestBody:
        required: true
        description: Body wrapper for the request.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogInBody"
      responses:
        200:
          description: Standard Food Lord API JSON response. You should check the `error` attribute to determine if there was an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        default:
          description: Unexpected error.
          content:
            application/text:
              schema:
                type: string
                description: Error description.

  /dashboard:
    get:
      tags:
        - dashboard
      summary: Getting user information given its id for the dashboard data
      description: Invoke this endpoint to get the user information given its id for the dashboard data.
      operationId: src.api.dashboard.get
      parameters:
        - name: user_id
          in: query
          description: Specifies the user to get.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Standard Food Lord API JSON response. You should check the `error` attribute to determine if there was an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        default:
          description: Unexpected error.
          content:
            application/text:
              schema:
                type: string
                description: Error description.

components:
  schemas:
    APIResponse:
      type: object
      properties:
        error:
          type: boolean
          description: Whether or not the request was successfully processed or not.
        message:
          type: string
          description: Error message if the request was unsuccessful.
        response:
          type: object
          description: Contains the response data if the request was successful.

    IngredientsBody:
      type: object
      properties:
        image_url:
          type: string
          description: Internet accessible image URL.
        image_base64:
          type: string
          description: Image safe-decoded in base64.

    CountBody:
      type: object
      properties:
        ingredients_list:
          type: array
          description: List of ingredients.
          items:
            type: string

    ConfirmBody:
      type: object
      properties:
        ingredients_list:
          type: array
          description: List of ingredients and calories.
          items:
            type: object
            properties:
              ingredient:
                type: string
                description: Ingredient name.
              calories:
                type: number
                format: float
                example: 1
                description: Ingredient calories.
        user_id:
          type: string
          description: User identifier.

    UserBody:
      type: object
      properties:
        first_name:
          type: string
          description: User first name.
        last_name:
          type: string
          description: User last name.
        email:
          type: string
          description: User email.
        username:
          type: string
          description: User name.
        password:
          type: string
          description: User SHA256 encoded password.

    LogInBody:
      type: object
      properties:
        username:
          type: string
          description: User name.
        password:
          type: string
          description: User SHA256 encoded password.
